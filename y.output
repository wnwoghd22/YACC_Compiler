Terminals unused in grammar

   VOID
   RETURN
   STRUCT
   STRING
   fVal
   cVal
   sVal
   KEY
   OP
   PUNC
   NOT
   EQ
   NQ
   GQ
   LQ
   GT
   LT
   AND
   OR
   BAND
   BOR
   INC
   DEC


Grammar

    0 $accept: Cmp_Stmt $end

    1 Cmp_Stmt: %empty
    2         | Stmt Cmp_Stmt

    3 Stmt: Expr ';'
    4     | Decl

    5 $@1: %empty

    6 $@2: %empty

    7 Stmt: IF '(' $@1 Expr ')' $@2 C_Stmt if_option

    8 $@3: %empty

    9 Stmt: SWITCH '(' ID ')' $@3 '{' switch_stmt '}'
   10     | ';'

   11 C_Stmt: Stmt
   12       | '{' Cmp_Stmt '}'

   13 if_option: %empty
   14          | ELSE C_Stmt

   15 switch_stmt: %empty
   16            | CASE iVal ':' C_Stmt switch_stmt
   17            | DEFAULT ':' C_Stmt switch_stmt

   18 Expr: E
   19     | ID '=' E

   20 E: E '+' E
   21  | E '-' E
   22  | E '*' E
   23  | E '/' E
   24  | '-' E
   25  | '(' E ')'
   26  | iVal
   27  | ID

   28 $@4: %empty

   29 $@5: %empty

   30 Decl: type ID $@4 assign_option $@5 decl_option ';'

   31 $@6: %empty

   32 $@7: %empty

   33 Decl: type ID '[' $@6 iVal ']' $@7 arr_assign_option arr_decl_option ';'

   34 $@8: %empty

   35 $@9: %empty

   36 Decl: type ID '(' $@8 type ID ')' '{' $@9 Stmt '}'

   37 assign_option: %empty

   38 $@10: %empty

   39 assign_option: '=' $@10 Expr

   40 arr_assign_option: %empty

   41 $@11: %empty

   42 $@12: %empty

   43 arr_assign_option: '=' '{' $@11 Expr $@12 arr_val_option '}'

   44 arr_val_option: %empty

   45 $@13: %empty

   46 arr_val_option: ',' Expr $@13 arr_val_option

   47 decl_option: %empty

   48 $@14: %empty

   49 $@15: %empty

   50 $@16: %empty

   51 decl_option: ',' $@14 ID $@15 assign_option $@16 decl_option

   52 arr_decl_option: %empty

   53 $@17: %empty

   54 arr_decl_option: ',' ID '[' iVal ']' $@17 arr_assign_option arr_decl_option

   55 type: INT
   56     | DOUBLE
   57     | CHAR
   58     | FLOAT


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 9 25 36
')' (41) 7 9 25 36
'*' (42) 22
'+' (43) 20
',' (44) 46 51 54
'-' (45) 21 24
'/' (47) 23
':' (58) 16 17
';' (59) 3 10 30 33
'=' (61) 19 39 43
'[' (91) 33 54
']' (93) 33 54
'{' (123) 9 12 36 43
'}' (125) 9 12 36 43
error (256)
VOID (258)
RETURN (259)
STRUCT (260)
iVal (261) 16 26 33 54
INT (262) 55
DOUBLE (263) 56
FLOAT (264) 58
CHAR (265) 57
STRING (266)
fVal (267)
cVal (268)
sVal (269)
ID (270) 9 19 27 30 33 36 51 54
KEY (271)
OP (272)
PUNC (273)
NOT (274)
EQ (275)
NQ (276)
GQ (277)
LQ (278)
GT (279)
LT (280)
AND (281)
OR (282)
BAND (283)
BOR (284)
IF (285) 7
ELSE (286) 14
SWITCH (287) 9
CASE (288) 16
DEFAULT (289) 17
UMINUS (290)
INC (291)
DEC (292)
"then" (293)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
Cmp_Stmt (54)
    on left: 1 2, on right: 0 2 12
Stmt (55)
    on left: 3 4 7 9 10, on right: 2 11 36
$@1 (56)
    on left: 5, on right: 7
$@2 (57)
    on left: 6, on right: 7
$@3 (58)
    on left: 8, on right: 9
C_Stmt (59)
    on left: 11 12, on right: 7 14 16 17
if_option (60)
    on left: 13 14, on right: 7
switch_stmt (61)
    on left: 15 16 17, on right: 9 16 17
Expr (62)
    on left: 18 19, on right: 3 7 39 43 46
E (63)
    on left: 20 21 22 23 24 25 26 27, on right: 18 19 20 21 22 23 24
    25
Decl (64)
    on left: 30 33 36, on right: 4
$@4 (65)
    on left: 28, on right: 30
$@5 (66)
    on left: 29, on right: 30
$@6 (67)
    on left: 31, on right: 33
$@7 (68)
    on left: 32, on right: 33
$@8 (69)
    on left: 34, on right: 36
$@9 (70)
    on left: 35, on right: 36
assign_option (71)
    on left: 37 39, on right: 30 51
$@10 (72)
    on left: 38, on right: 39
arr_assign_option (73)
    on left: 40 43, on right: 33 54
$@11 (74)
    on left: 41, on right: 43
$@12 (75)
    on left: 42, on right: 43
arr_val_option (76)
    on left: 44 46, on right: 43 46
$@13 (77)
    on left: 45, on right: 46
decl_option (78)
    on left: 47 51, on right: 30 51
$@14 (79)
    on left: 48, on right: 51
$@15 (80)
    on left: 49, on right: 51
$@16 (81)
    on left: 50, on right: 51
arr_decl_option (82)
    on left: 52 54, on right: 33 54
$@17 (83)
    on left: 53, on right: 54
type (84)
    on left: 55 56 57 58, on right: 30 33 36


State 0

    0 $accept: . Cmp_Stmt $end

    iVal    shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5
    ID      shift, and go to state 6
    IF      shift, and go to state 7
    SWITCH  shift, and go to state 8
    '-'     shift, and go to state 9
    ';'     shift, and go to state 10
    '('     shift, and go to state 11

    $default  reduce using rule 1 (Cmp_Stmt)

    Cmp_Stmt  go to state 12
    Stmt      go to state 13
    Expr      go to state 14
    E         go to state 15
    Decl      go to state 16
    type      go to state 17


State 1

   26 E: iVal .

    $default  reduce using rule 26 (E)


State 2

   55 type: INT .

    $default  reduce using rule 55 (type)


State 3

   56 type: DOUBLE .

    $default  reduce using rule 56 (type)


State 4

   58 type: FLOAT .

    $default  reduce using rule 58 (type)


State 5

   57 type: CHAR .

    $default  reduce using rule 57 (type)


State 6

   19 Expr: ID . '=' E
   27 E: ID .

    '='  shift, and go to state 18

    $default  reduce using rule 27 (E)


State 7

    7 Stmt: IF . '(' $@1 Expr ')' $@2 C_Stmt if_option

    '('  shift, and go to state 19


State 8

    9 Stmt: SWITCH . '(' ID ')' $@3 '{' switch_stmt '}'

    '('  shift, and go to state 20


State 9

   24 E: '-' . E

    iVal  shift, and go to state 1
    ID    shift, and go to state 21
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    E  go to state 22


State 10

   10 Stmt: ';' .

    $default  reduce using rule 10 (Stmt)


State 11

   25 E: '(' . E ')'

    iVal  shift, and go to state 1
    ID    shift, and go to state 21
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    E  go to state 23


State 12

    0 $accept: Cmp_Stmt . $end

    $end  shift, and go to state 24


State 13

    2 Cmp_Stmt: Stmt . Cmp_Stmt

    iVal    shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5
    ID      shift, and go to state 6
    IF      shift, and go to state 7
    SWITCH  shift, and go to state 8
    '-'     shift, and go to state 9
    ';'     shift, and go to state 10
    '('     shift, and go to state 11

    $default  reduce using rule 1 (Cmp_Stmt)

    Cmp_Stmt  go to state 25
    Stmt      go to state 13
    Expr      go to state 14
    E         go to state 15
    Decl      go to state 16
    type      go to state 17


State 14

    3 Stmt: Expr . ';'

    ';'  shift, and go to state 26


State 15

   18 Expr: E .
   20 E: E . '+' E
   21  | E . '-' E
   22  | E . '*' E
   23  | E . '/' E

    '-'  shift, and go to state 27
    '+'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30

    $default  reduce using rule 18 (Expr)


State 16

    4 Stmt: Decl .

    $default  reduce using rule 4 (Stmt)


State 17

   30 Decl: type . ID $@4 assign_option $@5 decl_option ';'
   33     | type . ID '[' $@6 iVal ']' $@7 arr_assign_option arr_decl_option ';'
   36     | type . ID '(' $@8 type ID ')' '{' $@9 Stmt '}'

    ID  shift, and go to state 31


State 18

   19 Expr: ID '=' . E

    iVal  shift, and go to state 1
    ID    shift, and go to state 21
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    E  go to state 32


State 19

    7 Stmt: IF '(' . $@1 Expr ')' $@2 C_Stmt if_option

    $default  reduce using rule 5 ($@1)

    $@1  go to state 33


State 20

    9 Stmt: SWITCH '(' . ID ')' $@3 '{' switch_stmt '}'

    ID  shift, and go to state 34


State 21

   27 E: ID .

    $default  reduce using rule 27 (E)


State 22

   20 E: E . '+' E
   21  | E . '-' E
   22  | E . '*' E
   23  | E . '/' E
   24  | '-' E .

    $default  reduce using rule 24 (E)


State 23

   20 E: E . '+' E
   21  | E . '-' E
   22  | E . '*' E
   23  | E . '/' E
   25  | '(' E . ')'

    '-'  shift, and go to state 27
    '+'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    ')'  shift, and go to state 35


State 24

    0 $accept: Cmp_Stmt $end .

    $default  accept


State 25

    2 Cmp_Stmt: Stmt Cmp_Stmt .

    $default  reduce using rule 2 (Cmp_Stmt)


State 26

    3 Stmt: Expr ';' .

    $default  reduce using rule 3 (Stmt)


State 27

   21 E: E '-' . E

    iVal  shift, and go to state 1
    ID    shift, and go to state 21
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    E  go to state 36


State 28

   20 E: E '+' . E

    iVal  shift, and go to state 1
    ID    shift, and go to state 21
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    E  go to state 37


State 29

   22 E: E '*' . E

    iVal  shift, and go to state 1
    ID    shift, and go to state 21
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    E  go to state 38


State 30

   23 E: E '/' . E

    iVal  shift, and go to state 1
    ID    shift, and go to state 21
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    E  go to state 39


State 31

   30 Decl: type ID . $@4 assign_option $@5 decl_option ';'
   33     | type ID . '[' $@6 iVal ']' $@7 arr_assign_option arr_decl_option ';'
   36     | type ID . '(' $@8 type ID ')' '{' $@9 Stmt '}'

    '('  shift, and go to state 40
    '['  shift, and go to state 41

    $default  reduce using rule 28 ($@4)

    $@4  go to state 42


State 32

   19 Expr: ID '=' E .
   20 E: E . '+' E
   21  | E . '-' E
   22  | E . '*' E
   23  | E . '/' E

    '-'  shift, and go to state 27
    '+'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30

    $default  reduce using rule 19 (Expr)


State 33

    7 Stmt: IF '(' $@1 . Expr ')' $@2 C_Stmt if_option

    iVal  shift, and go to state 1
    ID    shift, and go to state 6
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    Expr  go to state 43
    E     go to state 15


State 34

    9 Stmt: SWITCH '(' ID . ')' $@3 '{' switch_stmt '}'

    ')'  shift, and go to state 44


State 35

   25 E: '(' E ')' .

    $default  reduce using rule 25 (E)


State 36

   20 E: E . '+' E
   21  | E . '-' E
   21  | E '-' E .
   22  | E . '*' E
   23  | E . '/' E

    '*'  shift, and go to state 29
    '/'  shift, and go to state 30

    $default  reduce using rule 21 (E)


State 37

   20 E: E . '+' E
   20  | E '+' E .
   21  | E . '-' E
   22  | E . '*' E
   23  | E . '/' E

    '*'  shift, and go to state 29
    '/'  shift, and go to state 30

    $default  reduce using rule 20 (E)


State 38

   20 E: E . '+' E
   21  | E . '-' E
   22  | E . '*' E
   22  | E '*' E .
   23  | E . '/' E

    $default  reduce using rule 22 (E)


State 39

   20 E: E . '+' E
   21  | E . '-' E
   22  | E . '*' E
   23  | E . '/' E
   23  | E '/' E .

    $default  reduce using rule 23 (E)


State 40

   36 Decl: type ID '(' . $@8 type ID ')' '{' $@9 Stmt '}'

    $default  reduce using rule 34 ($@8)

    $@8  go to state 45


State 41

   33 Decl: type ID '[' . $@6 iVal ']' $@7 arr_assign_option arr_decl_option ';'

    $default  reduce using rule 31 ($@6)

    $@6  go to state 46


State 42

   30 Decl: type ID $@4 . assign_option $@5 decl_option ';'

    '='  shift, and go to state 47

    $default  reduce using rule 37 (assign_option)

    assign_option  go to state 48


State 43

    7 Stmt: IF '(' $@1 Expr . ')' $@2 C_Stmt if_option

    ')'  shift, and go to state 49


State 44

    9 Stmt: SWITCH '(' ID ')' . $@3 '{' switch_stmt '}'

    $default  reduce using rule 8 ($@3)

    $@3  go to state 50


State 45

   36 Decl: type ID '(' $@8 . type ID ')' '{' $@9 Stmt '}'

    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5

    type  go to state 51


State 46

   33 Decl: type ID '[' $@6 . iVal ']' $@7 arr_assign_option arr_decl_option ';'

    iVal  shift, and go to state 52


State 47

   39 assign_option: '=' . $@10 Expr

    $default  reduce using rule 38 ($@10)

    $@10  go to state 53


State 48

   30 Decl: type ID $@4 assign_option . $@5 decl_option ';'

    $default  reduce using rule 29 ($@5)

    $@5  go to state 54


State 49

    7 Stmt: IF '(' $@1 Expr ')' . $@2 C_Stmt if_option

    $default  reduce using rule 6 ($@2)

    $@2  go to state 55


State 50

    9 Stmt: SWITCH '(' ID ')' $@3 . '{' switch_stmt '}'

    '{'  shift, and go to state 56


State 51

   36 Decl: type ID '(' $@8 type . ID ')' '{' $@9 Stmt '}'

    ID  shift, and go to state 57


State 52

   33 Decl: type ID '[' $@6 iVal . ']' $@7 arr_assign_option arr_decl_option ';'

    ']'  shift, and go to state 58


State 53

   39 assign_option: '=' $@10 . Expr

    iVal  shift, and go to state 1
    ID    shift, and go to state 6
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    Expr  go to state 59
    E     go to state 15


State 54

   30 Decl: type ID $@4 assign_option $@5 . decl_option ';'

    ','  shift, and go to state 60

    $default  reduce using rule 47 (decl_option)

    decl_option  go to state 61


State 55

    7 Stmt: IF '(' $@1 Expr ')' $@2 . C_Stmt if_option

    iVal    shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5
    ID      shift, and go to state 6
    IF      shift, and go to state 7
    SWITCH  shift, and go to state 8
    '-'     shift, and go to state 9
    ';'     shift, and go to state 10
    '('     shift, and go to state 11
    '{'     shift, and go to state 62

    Stmt    go to state 63
    C_Stmt  go to state 64
    Expr    go to state 14
    E       go to state 15
    Decl    go to state 16
    type    go to state 17


State 56

    9 Stmt: SWITCH '(' ID ')' $@3 '{' . switch_stmt '}'

    CASE     shift, and go to state 65
    DEFAULT  shift, and go to state 66

    $default  reduce using rule 15 (switch_stmt)

    switch_stmt  go to state 67


State 57

   36 Decl: type ID '(' $@8 type ID . ')' '{' $@9 Stmt '}'

    ')'  shift, and go to state 68


State 58

   33 Decl: type ID '[' $@6 iVal ']' . $@7 arr_assign_option arr_decl_option ';'

    $default  reduce using rule 32 ($@7)

    $@7  go to state 69


State 59

   39 assign_option: '=' $@10 Expr .

    $default  reduce using rule 39 (assign_option)


State 60

   51 decl_option: ',' . $@14 ID $@15 assign_option $@16 decl_option

    $default  reduce using rule 48 ($@14)

    $@14  go to state 70


State 61

   30 Decl: type ID $@4 assign_option $@5 decl_option . ';'

    ';'  shift, and go to state 71


State 62

   12 C_Stmt: '{' . Cmp_Stmt '}'

    iVal    shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5
    ID      shift, and go to state 6
    IF      shift, and go to state 7
    SWITCH  shift, and go to state 8
    '-'     shift, and go to state 9
    ';'     shift, and go to state 10
    '('     shift, and go to state 11

    $default  reduce using rule 1 (Cmp_Stmt)

    Cmp_Stmt  go to state 72
    Stmt      go to state 13
    Expr      go to state 14
    E         go to state 15
    Decl      go to state 16
    type      go to state 17


State 63

   11 C_Stmt: Stmt .

    $default  reduce using rule 11 (C_Stmt)


State 64

    7 Stmt: IF '(' $@1 Expr ')' $@2 C_Stmt . if_option

    ELSE  shift, and go to state 73

    $default  reduce using rule 13 (if_option)

    if_option  go to state 74


State 65

   16 switch_stmt: CASE . iVal ':' C_Stmt switch_stmt

    iVal  shift, and go to state 75


State 66

   17 switch_stmt: DEFAULT . ':' C_Stmt switch_stmt

    ':'  shift, and go to state 76


State 67

    9 Stmt: SWITCH '(' ID ')' $@3 '{' switch_stmt . '}'

    '}'  shift, and go to state 77


State 68

   36 Decl: type ID '(' $@8 type ID ')' . '{' $@9 Stmt '}'

    '{'  shift, and go to state 78


State 69

   33 Decl: type ID '[' $@6 iVal ']' $@7 . arr_assign_option arr_decl_option ';'

    '='  shift, and go to state 79

    $default  reduce using rule 40 (arr_assign_option)

    arr_assign_option  go to state 80


State 70

   51 decl_option: ',' $@14 . ID $@15 assign_option $@16 decl_option

    ID  shift, and go to state 81


State 71

   30 Decl: type ID $@4 assign_option $@5 decl_option ';' .

    $default  reduce using rule 30 (Decl)


State 72

   12 C_Stmt: '{' Cmp_Stmt . '}'

    '}'  shift, and go to state 82


State 73

   14 if_option: ELSE . C_Stmt

    iVal    shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5
    ID      shift, and go to state 6
    IF      shift, and go to state 7
    SWITCH  shift, and go to state 8
    '-'     shift, and go to state 9
    ';'     shift, and go to state 10
    '('     shift, and go to state 11
    '{'     shift, and go to state 62

    Stmt    go to state 63
    C_Stmt  go to state 83
    Expr    go to state 14
    E       go to state 15
    Decl    go to state 16
    type    go to state 17


State 74

    7 Stmt: IF '(' $@1 Expr ')' $@2 C_Stmt if_option .

    $default  reduce using rule 7 (Stmt)


State 75

   16 switch_stmt: CASE iVal . ':' C_Stmt switch_stmt

    ':'  shift, and go to state 84


State 76

   17 switch_stmt: DEFAULT ':' . C_Stmt switch_stmt

    iVal    shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5
    ID      shift, and go to state 6
    IF      shift, and go to state 7
    SWITCH  shift, and go to state 8
    '-'     shift, and go to state 9
    ';'     shift, and go to state 10
    '('     shift, and go to state 11
    '{'     shift, and go to state 62

    Stmt    go to state 63
    C_Stmt  go to state 85
    Expr    go to state 14
    E       go to state 15
    Decl    go to state 16
    type    go to state 17


State 77

    9 Stmt: SWITCH '(' ID ')' $@3 '{' switch_stmt '}' .

    $default  reduce using rule 9 (Stmt)


State 78

   36 Decl: type ID '(' $@8 type ID ')' '{' . $@9 Stmt '}'

    $default  reduce using rule 35 ($@9)

    $@9  go to state 86


State 79

   43 arr_assign_option: '=' . '{' $@11 Expr $@12 arr_val_option '}'

    '{'  shift, and go to state 87


State 80

   33 Decl: type ID '[' $@6 iVal ']' $@7 arr_assign_option . arr_decl_option ';'

    ','  shift, and go to state 88

    $default  reduce using rule 52 (arr_decl_option)

    arr_decl_option  go to state 89


State 81

   51 decl_option: ',' $@14 ID . $@15 assign_option $@16 decl_option

    $default  reduce using rule 49 ($@15)

    $@15  go to state 90


State 82

   12 C_Stmt: '{' Cmp_Stmt '}' .

    $default  reduce using rule 12 (C_Stmt)


State 83

   14 if_option: ELSE C_Stmt .

    $default  reduce using rule 14 (if_option)


State 84

   16 switch_stmt: CASE iVal ':' . C_Stmt switch_stmt

    iVal    shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5
    ID      shift, and go to state 6
    IF      shift, and go to state 7
    SWITCH  shift, and go to state 8
    '-'     shift, and go to state 9
    ';'     shift, and go to state 10
    '('     shift, and go to state 11
    '{'     shift, and go to state 62

    Stmt    go to state 63
    C_Stmt  go to state 91
    Expr    go to state 14
    E       go to state 15
    Decl    go to state 16
    type    go to state 17


State 85

   17 switch_stmt: DEFAULT ':' C_Stmt . switch_stmt

    CASE     shift, and go to state 65
    DEFAULT  shift, and go to state 66

    $default  reduce using rule 15 (switch_stmt)

    switch_stmt  go to state 92


State 86

   36 Decl: type ID '(' $@8 type ID ')' '{' $@9 . Stmt '}'

    iVal    shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FLOAT   shift, and go to state 4
    CHAR    shift, and go to state 5
    ID      shift, and go to state 6
    IF      shift, and go to state 7
    SWITCH  shift, and go to state 8
    '-'     shift, and go to state 9
    ';'     shift, and go to state 10
    '('     shift, and go to state 11

    Stmt  go to state 93
    Expr  go to state 14
    E     go to state 15
    Decl  go to state 16
    type  go to state 17


State 87

   43 arr_assign_option: '=' '{' . $@11 Expr $@12 arr_val_option '}'

    $default  reduce using rule 41 ($@11)

    $@11  go to state 94


State 88

   54 arr_decl_option: ',' . ID '[' iVal ']' $@17 arr_assign_option arr_decl_option

    ID  shift, and go to state 95


State 89

   33 Decl: type ID '[' $@6 iVal ']' $@7 arr_assign_option arr_decl_option . ';'

    ';'  shift, and go to state 96


State 90

   51 decl_option: ',' $@14 ID $@15 . assign_option $@16 decl_option

    '='  shift, and go to state 47

    $default  reduce using rule 37 (assign_option)

    assign_option  go to state 97


State 91

   16 switch_stmt: CASE iVal ':' C_Stmt . switch_stmt

    CASE     shift, and go to state 65
    DEFAULT  shift, and go to state 66

    $default  reduce using rule 15 (switch_stmt)

    switch_stmt  go to state 98


State 92

   17 switch_stmt: DEFAULT ':' C_Stmt switch_stmt .

    $default  reduce using rule 17 (switch_stmt)


State 93

   36 Decl: type ID '(' $@8 type ID ')' '{' $@9 Stmt . '}'

    '}'  shift, and go to state 99


State 94

   43 arr_assign_option: '=' '{' $@11 . Expr $@12 arr_val_option '}'

    iVal  shift, and go to state 1
    ID    shift, and go to state 6
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    Expr  go to state 100
    E     go to state 15


State 95

   54 arr_decl_option: ',' ID . '[' iVal ']' $@17 arr_assign_option arr_decl_option

    '['  shift, and go to state 101


State 96

   33 Decl: type ID '[' $@6 iVal ']' $@7 arr_assign_option arr_decl_option ';' .

    $default  reduce using rule 33 (Decl)


State 97

   51 decl_option: ',' $@14 ID $@15 assign_option . $@16 decl_option

    $default  reduce using rule 50 ($@16)

    $@16  go to state 102


State 98

   16 switch_stmt: CASE iVal ':' C_Stmt switch_stmt .

    $default  reduce using rule 16 (switch_stmt)


State 99

   36 Decl: type ID '(' $@8 type ID ')' '{' $@9 Stmt '}' .

    $default  reduce using rule 36 (Decl)


State 100

   43 arr_assign_option: '=' '{' $@11 Expr . $@12 arr_val_option '}'

    $default  reduce using rule 42 ($@12)

    $@12  go to state 103


State 101

   54 arr_decl_option: ',' ID '[' . iVal ']' $@17 arr_assign_option arr_decl_option

    iVal  shift, and go to state 104


State 102

   51 decl_option: ',' $@14 ID $@15 assign_option $@16 . decl_option

    ','  shift, and go to state 60

    $default  reduce using rule 47 (decl_option)

    decl_option  go to state 105


State 103

   43 arr_assign_option: '=' '{' $@11 Expr $@12 . arr_val_option '}'

    ','  shift, and go to state 106

    $default  reduce using rule 44 (arr_val_option)

    arr_val_option  go to state 107


State 104

   54 arr_decl_option: ',' ID '[' iVal . ']' $@17 arr_assign_option arr_decl_option

    ']'  shift, and go to state 108


State 105

   51 decl_option: ',' $@14 ID $@15 assign_option $@16 decl_option .

    $default  reduce using rule 51 (decl_option)


State 106

   46 arr_val_option: ',' . Expr $@13 arr_val_option

    iVal  shift, and go to state 1
    ID    shift, and go to state 6
    '-'   shift, and go to state 9
    '('   shift, and go to state 11

    Expr  go to state 109
    E     go to state 15


State 107

   43 arr_assign_option: '=' '{' $@11 Expr $@12 arr_val_option . '}'

    '}'  shift, and go to state 110


State 108

   54 arr_decl_option: ',' ID '[' iVal ']' . $@17 arr_assign_option arr_decl_option

    $default  reduce using rule 53 ($@17)

    $@17  go to state 111


State 109

   46 arr_val_option: ',' Expr . $@13 arr_val_option

    $default  reduce using rule 45 ($@13)

    $@13  go to state 112


State 110

   43 arr_assign_option: '=' '{' $@11 Expr $@12 arr_val_option '}' .

    $default  reduce using rule 43 (arr_assign_option)


State 111

   54 arr_decl_option: ',' ID '[' iVal ']' $@17 . arr_assign_option arr_decl_option

    '='  shift, and go to state 79

    $default  reduce using rule 40 (arr_assign_option)

    arr_assign_option  go to state 113


State 112

   46 arr_val_option: ',' Expr $@13 . arr_val_option

    ','  shift, and go to state 106

    $default  reduce using rule 44 (arr_val_option)

    arr_val_option  go to state 114


State 113

   54 arr_decl_option: ',' ID '[' iVal ']' $@17 arr_assign_option . arr_decl_option

    ','  shift, and go to state 88

    $default  reduce using rule 52 (arr_decl_option)

    arr_decl_option  go to state 115


State 114

   46 arr_val_option: ',' Expr $@13 arr_val_option .

    $default  reduce using rule 46 (arr_val_option)


State 115

   54 arr_decl_option: ',' ID '[' iVal ']' $@17 arr_assign_option arr_decl_option .

    $default  reduce using rule 54 (arr_decl_option)
